//Given a string A and a dictionary of n words B, find out if A can be segmented into a space-separated sequence of dictionary words.

Note: From the dictionary B each word can be taken any number of times and in any order.
Example 1:

Input:
n = 12
B = { "i", "like", "sam",
"sung", "samsung", "mobile",
"ice","cream", "icecream",
"man", "go", "mango" }
A = "ilike"
Output:
1
Explanation:
The string can be segmented as "i like".

Example 2:

Input:
n = 12
B = { "i", "like", "sam",
"sung", "samsung", "mobile",
"ice","cream", "icecream", 
"man", "go", "mango" }
A = "ilikesamsung"
Output:
1
Explanation:
The string can be segmented as 
"i like samsung" or "i like sam sung".
 

Your Task:
Complete wordBreak() function which takes a string and list of strings as a parameter and returns 1 if it is possible to break words, else return 0. You don't need to read any input or print any output, it is done by driver code.


Expected time complexity: O(s2)

Expected auxiliary space: O(s) , where s = length of string A

 

Constraints:
1 <= N <= 12
1 <= s <=1000 , where s = length of string A
 The length of each word is less than 15.




unordered_map<string,int>dp;
class Solution
{
public:
    int wordBreak(string A, vector<string> &B) {
        
        
        int z=A.length();
        if(z==0)
        return 1;
        if(dp[A]!=0)return dp[A];
        //code here
        for(int i=1;i<=z;i++)
        {
            int ctr=0;
            string c1=A.substr(0,i);
            for(int j=0;j<B.size();j++)
            {
                
                if(c1.compare(B[j]) == 0)
                {
                    ctr=1;
                    break;
                }
                
            }
           
        if(ctr==1 and (wordBreak(A.substr(i,z-i),B)==1))
        return dp[A]=1;   
        
        }
     
        return dp[A]=0;
        
    }
};
